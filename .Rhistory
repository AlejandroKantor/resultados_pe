#=======================================================================================
# programa que prepara datos de encuestas para gr치fico de monitoreo de encuestas
# R 3.2.2
rm(list=ls())
gc()
gc()
library(data.table)
library(tidyr)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(plyr)
options(stringsAsFactors = FALSE)
ruta <- getwd()
ruta_in <- paste0(ruta,"/data/")
# parametros---------------------------------------------------------------------------
Sys.setenv("plotly_username"="alejandrokantor")
Sys.setenv("plotly_api_key"="c9vh7zksao")
k_min_porc <- 2
k_num_encuestas_recientes <- 4
k_num_visible <- 5
#=======================================================================================
# funciones
#=======================================================================================
#=======================================================================================
# importar y arreglar formato de datos
#=======================================================================================
dt_encuestas <- data.table(read.csv(file= paste0(ruta_in, "encuestasPrimeraVuelta.csv"),as.is=T))
str(dt_encuestas)
dt_encuestas[,Fecha_inicio:= as.Date(as.character(Fecha_inicio),"%Y%m%d")]
dt_encuestas[,Fecha_fin:= as.Date(as.character(Fecha_fin),"%Y%m%d")]
dt_color <- data.table(read.csv(file= paste0(ruta_in, "colorCandidato.csv"),as.is=T))
load( file= paste0(ruta_in, "dt_nombre_corto.RData"))
# cambiar nombre candidato dt_color
dt_color <- merge(dt_color, dt_nombre_corto,by="Candidato", all.x=T,all.y=F)
dt_color[ ,Candidato:=Nombre_corto]
dt_color[ ,Nombre_corto:=NULL]
#=======================================================================================
# para grafico se necesita que los datos esten en long
#=======================================================================================
v_key <- "Candidato"
measurement <- "Valor"
v_names <- names(dt_encuestas)
v_gathercols <- setdiff( v_names, c(v_key, measurement, "link", "Encuestadora", "Ambito","Fecha_inicio","Fecha_fin","Poblacion"))
dt_long <- data.table(gather_(data = dt_encuestas, key = v_key, measurement, v_gathercols,convert=T))
dt_long <- dt_long[!is.na(Valor)]
dt_long <- dt_long[ Candidato!="Suma"]
str(dt_long)
# cambiar nombre candidato dt_long
dt_long <- merge(dt_long, dt_nombre_corto,by="Candidato", all.x=T,all.y=F)
dt_long[ ,Candidato:=Nombre_corto]
dt_long[ ,Nombre_corto:=NULL]
#=======================================================================================
# Agregar columna texto
#=======================================================================================
dt_long[ ,Texto:= paste0( Encuestadora,"<br>", Fecha_inicio ," a ", Fecha_fin,"<br>",
Candidato, " ", Valor, "%" ) ,
by= .(Encuestadora, Fecha_fin, Candidato)]
#=======================================================================================
# Agrega candidatos que tienen menor que k_min_porc en otros_candidatos
#=======================================================================================
#identificar k_num_encuestas_recientes
v_fechas_recientes <- unique(dt_long[, Fecha_fin])
v_fechas_recientes <- v_fechas_recientes[order(v_fechas_recientes,decreasing = T)]
v_fechas_recientes <- v_fechas_recientes[1:k_num_encuestas_recientes]
dt_long[ , menor_que_limite:= ifelse( any(Valor[Fecha_fin %in% v_fechas_recientes]>= k_min_porc ),0,1), by=Candidato]
dt_long[ , Candidato:= ifelse( menor_que_limite==1 & !Candidato %in% c("B/V", "Ns/No"),
"Otros", Candidato)]
#agregacion
dt_long <- dt_long[ ,.(Valor=sum(Valor)), keyby=.(Candidato,Encuestadora, Fecha_inicio,Fecha_fin,Ambito, Texto)]
#=======================================================================================
# Crear objeto lowess por cada candidato y crear columna con estimacion
#=======================================================================================
ls_loess <- list()
v_candidatos <- unique(dt_long[, Candidato])
for(k_candidato in v_candidatos){
ls_loess[[k_candidato]] <- loess(Valor ~ as.numeric(Fecha_fin),data = dt_long[Candidato==k_candidato])
}
dt_long[, Valor_estimado:=0]
for(k_candidato in v_candidatos){
dt_long[Candidato==k_candidato , Valor_estimado:=predict(object = ls_loess[[k_candidato]],
newdata = data.frame(Fecha_fin= as.numeric(Fecha_fin)))]
}
#=======================================================================================
# agregar columna de color
#=======================================================================================
dt_long <- merge(dt_long, dt_color, all.x=T, all.y = F,by="Candidato")
#control
dt_long_sin_color <- dt_long[ is.na(Color)]
if(nrow(dt_long_sin_color)>0){
stop( paste0("falta incluir color para ", paste( unique(dt_long_sin_color[, Candidato]), collapse = " ")))
}
#=======================================================================================
# Identificar orden de candidatos en encuesta. En este momento se toma la encuesta m치s reciente
#=======================================================================================
dt_long_mas_reciente <- dt_long[ ,.(Valor=  mean(Valor_estimado[Fecha_fin==max(Fecha_fin)])), by=Candidato]
dt_long_mas_reciente <- dt_long_mas_reciente[ !Candidato %in% c("B/V", "Ns/No" ,"Otros")]
setorder(dt_long_mas_reciente, -Valor, na.last=T)
v_candidatos <- as.character(dt_long_mas_reciente[,Candidato])
dt_long[ , Candidato:= factor(as.character(Candidato),levels = c(v_candidatos, "Otros","B/V", "Ns/No" ))]
dt_long[ , Valor_estimado:= round(Valor_estimado,1)]
#=======================================================================================
# Agregar columna vilibilidad
#=======================================================================================
setorder(dt_long, Candidato, Fecha_fin)
v_candidatos <- levels(dt_long[ ,Candidato])
v_candidatos_primeros <- v_candidatos[1:k_num_visible]
dt_long[, Visbilidad:= ifelse( Candidato %in% v_candidatos_primeros,"TRUE", "'legendonly'")]
#=======================================================================================
# Agregar columna texto_estimado
#=======================================================================================
dt_long[ ,Texto_estimado:= paste0( "Estimado","<br>", Fecha_fin,"<br>",
Candidato, " ", Valor_estimado, "%" ),
by= .(Encuestadora, Fecha_fin,Candidato)]
#=======================================================================================
# Generar Gr치fico
#=======================================================================================
setorder(dt_long, Candidato, Fecha_fin)
v_candidatos <- levels(dt_long[ ,Candidato])
#inicializamos el plot con el primer candidato -------------------------------------------------------------------------
k_candidato <- v_candidatos[1]
py <- plot_ly(data = dt_long[ Candidato==k_candidato], x = Fecha_fin, y = Valor, marker = list(   color = unique(Color)),
name =  unique(Candidato), mode = "markers", filename="r-docs/encuesta" ,fileopt="overwrite" ,text = Texto,
legendgroup=  unique(Candidato), hoverinfo="text", showlegend = FALSE)
py <- py %>% add_trace(data = dt_long[ Candidato==k_candidato], mode="lines",x=Fecha_fin,
y =  Valor_estimado, name =  unique(Candidato),line = list(   color = unique(Color)),text = Texto_estimado,
legendgroup=  unique(Candidato), showlegend = TRUE)
for( k_i in 2:length(v_candidatos)){
k_candidato <- v_candidatos[k_i]
if( k_i<=k_num_visible){
k_tipo_visib <- TRUE
} else {
k_tipo_visib <- "legendonly"
}
py <- py %>% add_trace(data = dt_long[ Candidato==k_candidato], mode="markers",x=Fecha_fin,marker = list(   color = unique(Color)),
y =  Valor, name =  unique(Candidato),text = Texto,legendgroup=  unique(Candidato),
showlegend = FALSE, visible= eval(parse(text=Visbilidad)))
py <- py %>% add_trace(data = dt_long[ Candidato==k_candidato], mode="lines",x=Fecha_fin,line = list(   color = unique(Color)),
y =  Valor_estimado, name =  unique(Candidato),text = Texto_estimado,legendgroup=  unique(Candidato),
showlegend = TRUE,visible=  eval(parse(text=Visbilidad)))
}
py <- py %>% layout(xaxis = list(  title = "Fecha"),yaxis = list(  title = "", rangemode="tozero"),
legend= list( bgcolor= "#F0F0F0"),hovermode='closest',
margin= list(l=30, r=80, t=40, b=70),plot_bgcolor= "#fdfdfd")
py
#=======================================================================================
# guardar datos
#=======================================================================================
plotly::plotly_IMAGE(x = py,format = "jpeg",width = 800,height = 500,out_file = paste0(ruta,"gh-pages/images/","graficoEncuestas.jpg"))
plotly::plotly_IMAGE(x = py,format = "jpeg",width = 600,height = 450,out_file = paste0(ruta,"gh-pages/images/","graficoEncuestas_600x450.jpg"))
ruta
#=======================================================================================
# programa que prepara datos de encuestas para gr치fico de encuestas
# R 3.2.2
rm(list=ls())
gc()
gc()
library(data.table)
library(tidyr)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(plyr)
library(knitr)
options(stringsAsFactors = FALSE)
ruta <- paste0(getwd(),"/")
ruta_in <- paste0(ruta,"/data/")
# parametros---------------------------------------------------------------------------
Sys.setenv("plotly_username"="alejandrokantor")
Sys.setenv("plotly_api_key"="c9vh7zksao")
k_min_porc <- 2
k_num_encuestas_recientes <- 4
k_num_visible <- 5
k_actualizar_pagina <- F
k_actualizar_grafico <- F
#=======================================================================================
# funciones
#=======================================================================================
#=======================================================================================
# importar y arreglar formato de datos
#=======================================================================================
dt_encuestas <- data.table(read.csv(file= paste0(ruta_in, "encuestasPrimeraVuelta2011.csv"),as.is=T))
str(dt_encuestas)
dt_encuestas <- dt_encuestas[ Fecha_inicio>= 20100401 ]
dt_encuestas <- dt_encuestas[ Encuestadora %in% c("CPI", "Datum", "Ipsos Apoyo", "ONPE")]
dt_encuestas[,Fecha_inicio:= as.Date(as.character(Fecha_inicio),"%Y%m%d")]
dt_encuestas[,Fecha_fin:= as.Date(as.character(Fecha_fin),"%Y%m%d")]
dt_color <- data.table(read.csv(file= paste0(ruta_in, "colorCandidato.csv"),as.is=T))
load( file= paste0(ruta_in, "dt_nombre_corto.RData"))
# cambiar nombre candidato dt_color
dt_color <- merge(dt_color, dt_nombre_corto,by="Candidato", all.x=T,all.y=F)
dt_color[ ,Candidato:=Nombre_corto]
dt_color[ ,Nombre_corto:=NULL]
#=======================================================================================
# para grafico se necesita que los datos esten en long
#=======================================================================================
v_key <- "Candidato"
measurement <- "Valor"
v_names <- names(dt_encuestas)
v_gathercols <- setdiff( v_names, c(v_key, measurement, "link", "Encuestadora", "Ambito","Fecha_inicio","Fecha_fin","Poblacion"))
dt_long <- data.table(gather_(data = dt_encuestas, key = v_key, measurement, v_gathercols,convert=T))
dt_long <- dt_long[!is.na(Valor)]
dt_long <- dt_long[ Candidato!="Suma"]
str(dt_long)
# cambiar nombre candidato dt_long
dt_long <- merge(dt_long, dt_nombre_corto,by="Candidato", all.x=T,all.y=F)
dt_sin_nomb <- dt_long[ is.na(Nombre_corto)]
if( nrow(dt_sin_nomb)>0) {
print(dt_sin_nomb[,.(Candidato, Nombre_corto)])
stop("falta agregar candidatos")
}
dt_long[ ,Candidato:=Nombre_corto]
dt_long[ ,Nombre_corto:=NULL]
#
#
# #=======================================================================================
# # Agrega candidatos que tienen menor que k_min_porc en otros_candidatos
# #=======================================================================================
# #identificar k_num_encuestas_recientes
#
# v_fechas_recientes <- unique(dt_long[, Fecha_fin])
# v_fechas_recientes <- v_fechas_recientes[order(v_fechas_recientes,decreasing = T)]
# v_fechas_recientes <- v_fechas_recientes[1:k_num_encuestas_recientes]
#
#
# dt_long[ , menor_que_limite:= ifelse( any(Valor[Fecha_fin %in% v_fechas_recientes]>= k_min_porc ),0,1), by=Candidato]
# dt_long[ , Candidato:= ifelse( menor_que_limite==1 & !Candidato %in% c("B/V", "Ns/No"),
#                                "Otros", Candidato)]
#
# #agregacion
# dt_long <- dt_long[ ,.(Valor=sum(Valor)), keyby=.(Candidato,Encuestadora, Fecha_inicio,Fecha_fin,Ambito)]
#=======================================================================================
# Agregar columna texto
#=======================================================================================
dt_long[ ,Texto:= paste0( Encuestadora,"<br>",   format( Fecha_inicio, "%d-%m-%Y")  ," a ",
format( Fecha_fin, "%d-%m-%Y") ,"<br>",
Candidato, " ", Valor, "%" ) ,
by= .(Encuestadora, Fecha_fin, Candidato)]
#=======================================================================================
# Crear objeto lowess por cada candidato y crear columna con estimacion
#=======================================================================================
ls_loess <- list()
v_candidatos <- unique(dt_long[, Candidato])
for(k_candidato in v_candidatos){
ls_loess[[k_candidato]] <- loess(Valor ~ as.numeric(Fecha_fin),
data = dt_long[Candidato==k_candidato & Encuestadora != "ONPE"])
}
dt_long[, Valor_estimado:=NA_real_]
for(k_candidato in v_candidatos){
dt_long[Candidato==k_candidato & Encuestadora != "ONPE", Valor_estimado:=predict(object = ls_loess[[k_candidato]],
newdata = data.frame(Fecha_fin= as.numeric(Fecha_fin)))]
}
#=======================================================================================
# agregar columna de color
#=======================================================================================
dt_long <- merge(dt_long, dt_color, all.x=T, all.y = F,by="Candidato")
#control
dt_long_sin_color <- dt_long[ is.na(Color)]
if(nrow(dt_long_sin_color)>0){
stop( paste0("falta incluir color para ", paste( unique(dt_long_sin_color[, Candidato]), collapse = " ")))
}
#=======================================================================================
# Identificar orden de candidatos en encuesta.
#En este momento se toma el valor estimado de la fecha de la encuesta m치s reciente
#=======================================================================================
dt_long_mas_reciente <- dt_long[ Encuestadora == "ONPE"]
dt_long_mas_reciente <- dt_long_mas_reciente[ !Candidato %in% c("B/V", "Ns/No" ,"Otros")]
setorder(dt_long_mas_reciente, -Valor, na.last=T)
v_candidatos <- as.character(dt_long_mas_reciente[,Candidato])
dt_long[ , Candidato:= factor(as.character(Candidato),levels = c(v_candidatos, "Otros","B/V", "Ns/No" ))]
dt_long[ , Valor_estimado:= round(Valor_estimado,1)]
#=======================================================================================
# Agregar columna vilibilidad
#=======================================================================================
setorder(dt_long, Candidato, Fecha_fin)
v_candidatos <- levels(dt_long[ ,Candidato])
v_candidatos_primeros <- v_candidatos[1:k_num_visible]
dt_long[, Visbilidad:= ifelse( Candidato %in% v_candidatos_primeros,"TRUE", "'legendonly'")]
#=======================================================================================
# Agregar columna texto_estimado
#=======================================================================================
dt_long[ ,Texto_estimado:= paste0( "Estimado","<br>", format( Fecha_fin, "%d-%m-%Y"),"<br>",
Candidato, " ", Valor_estimado, "%" ),
by= .(Encuestadora, Fecha_fin,Candidato)]
#=======================================================================================
# Generar Gr치fico
#=======================================================================================
setorder(dt_long, Candidato, Fecha_fin)
v_candidatos <- levels(dt_long[ ,Candidato])
#inicializamos el plot con el primer candidato -------------------------------------------------------------------------
k_candidato <- v_candidatos[1]
py <- plot_ly(data = dt_long[ Candidato==k_candidato], x = Fecha_fin, y = Valor, marker = list(   color = unique(Color)),
name =  unique(Candidato), mode = "markers",text = Texto,
legendgroup=  unique(Candidato), hoverinfo="text", showlegend = FALSE)
py <- py %>% add_trace(data = dt_long[ Candidato==k_candidato], mode="lines",x=Fecha_fin,
y =  Valor_estimado, name =  unique(Candidato),line = list(   color = unique(Color)),text = Texto_estimado,
legendgroup=  unique(Candidato), showlegend = TRUE)
for( k_i in 2:length(v_candidatos)){
k_candidato <- v_candidatos[k_i]
if( k_i<=k_num_visible){
k_tipo_visib <- TRUE
} else {
k_tipo_visib <- "legendonly"
}
py <- py %>% add_trace(data = dt_long[ Candidato==k_candidato], mode="markers",x=Fecha_fin,marker = list(   color = unique(Color)),
y =  Valor, name =  unique(Candidato),text = Texto,legendgroup=  unique(Candidato),
showlegend = FALSE, visible= eval(parse(text=Visbilidad)))
py <- py %>% add_trace(data = dt_long[ Candidato==k_candidato], mode="lines",x=Fecha_fin,line = list(   color = unique(Color)),
y =  Valor_estimado, name =  unique(Candidato),text = Texto_estimado,legendgroup=  unique(Candidato),
showlegend = TRUE,visible=  eval(parse(text=Visbilidad)))
}
py <- py %>% layout(xaxis = list(  title = "Fecha"),yaxis = list(  title = "", rangemode="tozero"),
legend= list( bgcolor= "#F0F0F0"),hovermode='closest',
margin= list(l=30, r=80, t=40, b=70),plot_bgcolor= "#fdfdfd", paper_bgcolor  ="#fdfdfd" )
k_date <- as.Date("20110408","%Y%m%d")
#poner lineas que marcan
py <- py %>% layout(annotations= list(x= k_date , y = 30, text= "Elecciones",ax=0, ay=-10, showarrow=T,arrowhead = 7,
arrowsize=0.3))
py
rm(list=ls())
gc()
gc()
library(data.table)
library(tidyr)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(plyr)
library(knitr)
options(stringsAsFactors = FALSE)
ruta <- paste0(getwd(),"/")
ruta_in <- paste0(ruta,"/data/")
# parametros---------------------------------------------------------------------------
Sys.setenv("plotly_username"="alejandrokantor")
Sys.setenv("plotly_api_key"="c9vh7zksao")
k_min_porc <- 2
k_num_encuestas_recientes <- 4
k_num_visible <- 5
k_actualizar_pagina <- F
k_actualizar_grafico <- F
#=======================================================================================
# funciones
#=======================================================================================
#=======================================================================================
# importar y arreglar formato de datos
#=======================================================================================
dt_encuestas <- data.table(read.csv(file= paste0(ruta_in, "encuestasPrimeraVuelta2011.csv"),as.is=T))
str(dt_encuestas)
setwd("~/Documents/proyectos independientes/resultados_pe/resultados_pe/gh-pages")
